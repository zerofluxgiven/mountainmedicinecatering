rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ NEW - User Collection Rules for Google OAuth
    match /users/{userId} {
      allow read, write: if true; // Temporary - allows all user operations
    }

    // ✅ PRESERVED - Your existing notifications rules
    match /notifications/{notifId} {
      allow read, write: if
        request.auth != null &&
        (
          // allow user to access only their own notifications
          request.resource.data.to_user_id == request.auth.token.email ||
          // allow developer account full access
          request.auth.token.email == "admin@mountainmedicine.dev"
        );
    }

    // ✅ Core Collections (require login)
    match /events/{eventId} {
      allow read, write: if request.auth != null;
    }

    match /menus/{menuId} {
      allow read, write: if request.auth != null;
    }
    
    // ✅ CRITICAL FIX - Add rule for menu_items (your actual collection name)
    match /menu_items/{menuId} {
      allow read, write: if request.auth != null;
    }

    match /files/{fileId} {
      allow read, write: if request.auth != null;
    }

    match /receipts/{receiptId} {
      allow read, write: if request.auth != null;
    }

    match /suggestions/{suggestionId} {
      allow read, write: if request.auth != null;
    }

    match /tags/{tagId} {
      allow read, write: if request.auth != null;
    }

    match /ingredients/{ingredientId} {
      allow read, write: if request.auth != null;
    }

    match /logs/{logId} {
      allow read, write: if request.auth != null;
    }

    match /config/{configId} {
      allow read, write: if request.auth != null;
    }

    // AI collections
    match /ai_monitoring/{monitoringId} {
      allow read, write: if request.auth != null;
    }
    
    match /ai_actions/{actionId} {
      allow read, write: if request.auth != null;
    }
    
    match /ai_questions/{questionId} {
      allow read, write: if request.auth != null;
    }
    
    match /ai_interactions/{interactionId} {
      allow read, write: if request.auth != null;
    }

    // Accommodation menus collection
    match /accommodation_menus/{accommodationId} {
      allow read, write: if request.auth != null;
    }

    // Meal types collection
    match /meal_types/{mealTypeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    // Shopping lists collection
    match /shopping_lists/{shoppingListId} {
      allow read, write: if request.auth != null;
    }
    
    // ✅ Allergens and dietary restrictions
    match /allergens/{allergenId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    match /dietary_restrictions/{dietId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // ✅ Fix typo: vent_modifications
    match /vent_modifications/{modId} {
      allow read, write: if request.auth != null;
    }
    
    // ✅ Correct name also supported
    match /event_modifications/{modId} {
      allow read, write: if request.auth != null;
    }

    // ✅ Conversations collection for AI Chat
    match /conversations/{conversationId} {
      // Allow authenticated users to read their own conversations
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.email == resource.data.userEmail);
      
      // Allow authenticated users to create conversations for themselves
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.userId || 
         (request.resource.data.userId == request.auth.uid && 
          request.resource.data.userEmail == request.auth.token.email));
      
      // Allow users to update/delete their own conversations
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.email == resource.data.userEmail);
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          (get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid ||
           get(/databases/$(database)/documents/conversations/$(conversationId)).data.userEmail == request.auth.token.email);
      }
    }

    // ✅ Special Recipe Rules — Public Read, Authenticated Write
    match /recipes/{recipeId} {
      allow read: if true;
      // Allow any authenticated user to write recipes (since role claims might not be set)
      allow write: if request.auth != null;
      
      // Recipe versions subcollection
      match /versions/{versionId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    // ✅ Event Subcollections
    match /events/{eventId}/shopping_items/{itemId} {
      allow read, write: if request.auth != null;
    }

    match /events/{eventId}/equipment/{equipmentId} {
      allow read, write: if request.auth != null;
    }

    match /events/{eventId}/tasks/{taskId} {
      allow read, write: if request.auth != null;
    }

    match /events/{eventId}/allergies/{allergyId} {
      allow read, write: if request.auth != null;
    }

    match /events/{eventId}/diets/{dietId} {
      allow read, write: if request.auth != null;
    }
  }
}